{
  "comments": [
    {
      "key": {
        "uuid": "796f2216_2d387e1d",
        "filename": "dx/tests/run-all-tests",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1103203
      },
      "writtenOn": "2017-12-20T16:58:23Z",
      "side": 1,
      "message": "stupid question, what does this do/how does this work?\n\n$ help exec\nexec: exec [-cl] [-a name] [command [arguments ...]] [redirection ...]\n    Replace the shell with the given command.\n\n\nbut ${lock_fd} is \"200\" which is not a command (based on the name, it seems to be a hard coded file descriptor #?), and flock expects a filename.",
      "range": {
        "startLine": 144,
        "startChar": 0,
        "endLine": 144,
        "endChar": 37
      },
      "revId": "3bb30679774e16a1ffd3a0685d4cd6c832cf67f4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63998c38_2a0ddf75",
        "filename": "dx/tests/run-all-tests",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-12-21T08:36:10Z",
      "side": 1,
      "message": "This may be a $10 solution to a $0.01 problem.\n\nThe output of \u0027help exec\u0027 continues to say:\n\n Execute COMMAND, replacing this shell with the specified program.\n ARGUMENTS become the arguments to COMMAND.  If COMMAND is not specified,\n any redirections take effect in the current shell.\n\nIt\u0027s the behaviour in the last sentence that this is using.\n\nThis line in the script is creating a file descriptor that corresponds to a file, the value is arbitrary. The use of eval prevents the potential confusion that 200 is a command which generates an error.\n\nThe man page for flock(1) documents it having a form accepting a file descriptor. Not sure if there are earlier versions that didn\u0027t support this and it\u0027s a goobuntu vs gLinux man page issue.\n\nFWIW, I tried to implement a work distributor :- one process hands tests to execute one at a time, and worker processes pick up test names and execute them. It seemed too hard to do well is a shell script (or at least, my implmentation was gnarly and not reliable).",
      "parentUuid": "796f2216_2d387e1d",
      "range": {
        "startLine": 144,
        "startChar": 0,
        "endLine": 144,
        "endChar": 37
      },
      "revId": "3bb30679774e16a1ffd3a0685d4cd6c832cf67f4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c44aa91_e7846102",
        "filename": "dx/tests/run-all-tests",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1103203
      },
      "writtenOn": "2017-12-21T14:53:21Z",
      "side": 1,
      "message": "I think the issue is/was that I wasn\u0027t familiar with syntax of the form\n\n\"exec 200\u003elock.0\"\n\nbecause 200 looked like a command to me (seems like this is interpreted as a fd instead, probably similar to the \"2\u003e\u00261\" syntax in bash which I never properly understood but just looked up and understand better now). This wasn\u0027t obvious to me, but is probably obvious to people with more bash skill.\n\nSo the \"flock 200\" below will wait on the fd that is tied to lock_file; I don\u0027t understand why \"flock ${lock_file}\" wouldn\u0027t work, but as long as it empirically works, that\u0027s fine because I don\u0027t want to waste your time.",
      "parentUuid": "63998c38_2a0ddf75",
      "range": {
        "startLine": 144,
        "startChar": 0,
        "endLine": 144,
        "endChar": 37
      },
      "revId": "3bb30679774e16a1ffd3a0685d4cd6c832cf67f4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4d76923_dc9a3a0b",
        "filename": "dx/tests/run-all-tests",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2017-12-21T15:49:51Z",
      "side": 1,
      "message": "The \"flock \u003clock_file\u003e cmd\" would likely work fine here as there is only a single command that requires the lock:\n\n flock ${lock_file} ${SHELL} ./run-test ...\n\nIt is now changed to use this briefer form. This is less general and removes the ability to stick additional code in there under the lock (which there was when first writing this).\n\nIn the old scheme, the fd value of 200 is arbitrary. This function is called in a newly spawned sub-shell. If the file descriptor 200 was in use, it is now closed and re-opened to correspond to the lock file. We know (sort of) that this value is \"safe\" because we do not use it and it\u0027s not one of the shell\u0027s well known descriptors. It is also local to the sub-shell instance.",
      "parentUuid": "8c44aa91_e7846102",
      "range": {
        "startLine": 144,
        "startChar": 0,
        "endLine": 144,
        "endChar": 37
      },
      "revId": "3bb30679774e16a1ffd3a0685d4cd6c832cf67f4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}